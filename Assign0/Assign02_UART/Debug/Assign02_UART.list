
Assign02_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003d60  08003d60  00004d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003de8  08003de8  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dec  08003dec  00004dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003df0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005060  2**0
                  CONTENTS
 10 .bss          000041e8  20000060  20000060  00005060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004248  20004248  00005060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bc3  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a4a  00000000  00000000  00017c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0001a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb9  00000000  00000000  0001b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226dd  00000000  00000000  0001c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ac6  00000000  00000000  0003ea8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3313  00000000  00000000  00050554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123867  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046f8  00000000  00000000  001238ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00127fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d48 	.word	0x08003d48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003d48 	.word	0x08003d48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	2000011c 	.word	0x2000011c

08000504 <vUARTSendingTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vUARTSendingTask(void *pvParam)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	char *pcMessage = (char *)pvParam;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		portENTER_CRITICAL();
 8000510:	f003 f872 	bl	80035f8 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	f7ff fe5b 	bl	80001d0 <strlen>
 800051a:	4603      	mov	r3, r0
 800051c:	b29a      	uxth	r2, r3
 800051e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000522:	68f9      	ldr	r1, [r7, #12]
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <vUARTSendingTask+0x38>)
 8000526:	f001 fceb 	bl	8001f00 <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 800052a:	f003 f897 	bl	800365c <vPortExitCritical>
		vTaskDelay(2000 / portTICK_RATE_MS);
 800052e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000532:	f002 fb83 	bl	8002c3c <vTaskDelay>
		portENTER_CRITICAL();
 8000536:	bf00      	nop
 8000538:	e7ea      	b.n	8000510 <vUARTSendingTask+0xc>
 800053a:	bf00      	nop
 800053c:	2000031c 	.word	0x2000031c

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b08c      	sub	sp, #48	@ 0x30
 8000544:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	BaseType_t xRet;
		char * pcMessage = "This is UART Demo\r\n";
 8000546:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <main+0x7c>)
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fa5d 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f843 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f8d5 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f8a9 	bl	80006ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 800055a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800055c:	f7ff fe38 	bl	80001d0 <strlen>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000568:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800056a:	4815      	ldr	r0, [pc, #84]	@ (80005c0 <main+0x80>)
 800056c:	f001 fcc8 	bl	8001f00 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <main+0x84>)
 8000572:	1d3c      	adds	r4, r7, #4
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f895 	bl	80026b6 <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <main+0x88>)
 8000590:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xRet = xTaskCreate(vUARTSendingTask, "UART1 Task", configMINIMAL_STACK_SIZE, "Kaushal Kumar Soni\r\n", 3, NULL);
 8000592:	2300      	movs	r3, #0
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2303      	movs	r3, #3
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <main+0x8c>)
 800059c:	2280      	movs	r2, #128	@ 0x80
 800059e:	490c      	ldr	r1, [pc, #48]	@ (80005d0 <main+0x90>)
 80005a0:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <main+0x94>)
 80005a2:	f002 f9fc 	bl	800299e <xTaskCreate>
 80005a6:	6238      	str	r0, [r7, #32]
      if(xRet != pdTRUE)
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d001      	beq.n	80005b2 <main+0x72>
    	  Error_Handler();
 80005ae:	f000 f8db 	bl	8000768 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b2:	f002 f879 	bl	80026a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	bf00      	nop
 80005b8:	e7fd      	b.n	80005b6 <main+0x76>
 80005ba:	bf00      	nop
 80005bc:	08003d60 	.word	0x08003d60
 80005c0:	2000031c 	.word	0x2000031c
 80005c4:	08003da4 	.word	0x08003da4
 80005c8:	20000364 	.word	0x20000364
 80005cc:	08003d74 	.word	0x08003d74
 80005d0:	08003d8c 	.word	0x08003d8c
 80005d4:	08000505 	.word	0x08000505

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fad4 	bl	8003b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800064c:	2332      	movs	r3, #50	@ 0x32
 800064e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000650:	2304      	movs	r3, #4
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fc93 	bl	8000f88 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f87e 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000678:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fef4 	bl	8001478 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000696:	f000 f867 	bl	8000768 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f001 fbbc 	bl	8001e60 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f83b 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000031c 	.word	0x2000031c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_GPIO_Init+0x30>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <MX_GPIO_Init+0x30>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_GPIO_Init+0x30>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f002 f806 	bl	800274e <osDelay>
 8000742:	e7fb      	b.n	800073c <StartDefaultTask+0x8>

08000744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000756:	f000 f979 	bl	8000a4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010000 	.word	0x40010000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_MspInit+0x54>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <HAL_MspInit+0x54>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000788:	6453      	str	r3, [r2, #68]	@ 0x44
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_MspInit+0x54>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <HAL_MspInit+0x54>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <HAL_MspInit+0x54>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <HAL_MspInit+0x54>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	210f      	movs	r1, #15
 80007b6:	f06f 0001 	mvn.w	r0, #1
 80007ba:	f000 fa1f 	bl	8000bfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a19      	ldr	r2, [pc, #100]	@ (8000850 <HAL_UART_MspInit+0x84>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d12b      	bne.n	8000846 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_UART_MspInit+0x88>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <HAL_UART_MspInit+0x88>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_UART_MspInit+0x88>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_UART_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <HAL_UART_MspInit+0x88>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <HAL_UART_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000826:	230c      	movs	r3, #12
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000836:	2307      	movs	r3, #7
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <HAL_UART_MspInit+0x8c>)
 8000842:	f000 fa05 	bl	8000c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	@ 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40004400 	.word	0x40004400
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000

0800085c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <HAL_InitTick+0xd4>)
 8000872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000874:	4a2e      	ldr	r2, [pc, #184]	@ (8000930 <HAL_InitTick+0xd4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6453      	str	r3, [r2, #68]	@ 0x44
 800087c:	4b2c      	ldr	r3, [pc, #176]	@ (8000930 <HAL_InitTick+0xd4>)
 800087e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000888:	f107 020c 	add.w	r2, r7, #12
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f810 	bl	80018b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000898:	f000 fffa 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 800089c:	4603      	mov	r3, r0
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a4:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <HAL_InitTick+0xd8>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008b0:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <HAL_InitTick+0xdc>)
 80008b2:	4a22      	ldr	r2, [pc, #136]	@ (800093c <HAL_InitTick+0xe0>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <HAL_InitTick+0xdc>)
 80008b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008be:	4a1e      	ldr	r2, [pc, #120]	@ (8000938 <HAL_InitTick+0xdc>)
 80008c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_InitTick+0xdc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <HAL_InitTick+0xdc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_InitTick+0xdc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008d6:	4818      	ldr	r0, [pc, #96]	@ (8000938 <HAL_InitTick+0xdc>)
 80008d8:	f001 f820 	bl	800191c <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d11b      	bne.n	8000922 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008ea:	4813      	ldr	r0, [pc, #76]	@ (8000938 <HAL_InitTick+0xdc>)
 80008ec:	f001 f870 	bl	80019d0 <HAL_TIM_Base_Start_IT>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d111      	bne.n	8000922 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008fe:	2019      	movs	r0, #25
 8000900:	f000 f998 	bl	8000c34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b0f      	cmp	r3, #15
 8000908:	d808      	bhi.n	800091c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800090a:	2200      	movs	r2, #0
 800090c:	6879      	ldr	r1, [r7, #4]
 800090e:	2019      	movs	r0, #25
 8000910:	f000 f974 	bl	8000bfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000914:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_InitTick+0xe4>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e002      	b.n	8000922 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000926:	4618      	mov	r0, r3
 8000928:	3730      	adds	r7, #48	@ 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	431bde83 	.word	0x431bde83
 8000938:	20000368 	.word	0x20000368
 800093c:	40010000 	.word	0x40010000
 8000940:	20000004 	.word	0x20000004

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <NMI_Handler+0x4>

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <MemManage_Handler+0x4>

0800095c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <UsageFault_Handler+0x4>

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000982:	f001 f895 	bl	8001ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000368 	.word	0x20000368

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b8:	f7ff ffea 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	@ (80009f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f003 f935 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fdab 	bl	8000540 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009f8:	08003df0 	.word	0x08003df0
  ldr r2, =_sbss
 80009fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a00:	20004248 	.word	0x20004248

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <HAL_Init+0x40>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <HAL_Init+0x40>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_Init+0x40>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f8d8 	bl	8000be6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	200f      	movs	r0, #15
 8000a38:	f7ff ff10 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fe9a 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023c00 	.word	0x40023c00

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	200003b0 	.word	0x200003b0

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200003b0 	.word	0x200003b0

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	@ 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff4c 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0e:	f7ff ff61 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	6978      	ldr	r0, [r7, #20]
 8000c1a:	f7ff ffb1 	bl	8000b80 <NVIC_EncodePriority>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff80 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff54 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	@ 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	e16b      	b.n	8000f44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	f040 815a 	bne.w	8000f3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d005      	beq.n	8000ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d130      	bne.n	8000d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	091b      	lsrs	r3, r3, #4
 8000cee:	f003 0201 	and.w	r2, r3, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d017      	beq.n	8000d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d123      	bne.n	8000d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	691a      	ldr	r2, [r3, #16]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	69b9      	ldr	r1, [r7, #24]
 8000d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0203 	and.w	r2, r3, #3
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 80b4 	beq.w	8000f3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b60      	ldr	r3, [pc, #384]	@ (8000f5c <HAL_GPIO_Init+0x30c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a5f      	ldr	r2, [pc, #380]	@ (8000f5c <HAL_GPIO_Init+0x30c>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f5c <HAL_GPIO_Init+0x30c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f60 <HAL_GPIO_Init+0x310>)
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a52      	ldr	r2, [pc, #328]	@ (8000f64 <HAL_GPIO_Init+0x314>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d02b      	beq.n	8000e76 <HAL_GPIO_Init+0x226>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a51      	ldr	r2, [pc, #324]	@ (8000f68 <HAL_GPIO_Init+0x318>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d025      	beq.n	8000e72 <HAL_GPIO_Init+0x222>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a50      	ldr	r2, [pc, #320]	@ (8000f6c <HAL_GPIO_Init+0x31c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d01f      	beq.n	8000e6e <HAL_GPIO_Init+0x21e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4f      	ldr	r2, [pc, #316]	@ (8000f70 <HAL_GPIO_Init+0x320>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_Init+0x21a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4e      	ldr	r2, [pc, #312]	@ (8000f74 <HAL_GPIO_Init+0x324>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0x216>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4d      	ldr	r2, [pc, #308]	@ (8000f78 <HAL_GPIO_Init+0x328>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00d      	beq.n	8000e62 <HAL_GPIO_Init+0x212>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4c      	ldr	r2, [pc, #304]	@ (8000f7c <HAL_GPIO_Init+0x32c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x20e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4b      	ldr	r2, [pc, #300]	@ (8000f80 <HAL_GPIO_Init+0x330>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_GPIO_Init+0x20a>
 8000e56:	2307      	movs	r3, #7
 8000e58:	e00e      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	e00c      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e5e:	2306      	movs	r3, #6
 8000e60:	e00a      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e62:	2305      	movs	r3, #5
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e76:	2300      	movs	r3, #0
 8000e78:	69fa      	ldr	r2, [r7, #28]
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e88:	4935      	ldr	r1, [pc, #212]	@ (8000f60 <HAL_GPIO_Init+0x310>)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <HAL_GPIO_Init+0x334>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eba:	4a32      	ldr	r2, [pc, #200]	@ (8000f84 <HAL_GPIO_Init+0x334>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <HAL_GPIO_Init+0x334>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee4:	4a27      	ldr	r2, [pc, #156]	@ (8000f84 <HAL_GPIO_Init+0x334>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_GPIO_Init+0x334>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <HAL_GPIO_Init+0x334>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_GPIO_Init+0x334>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f38:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <HAL_GPIO_Init+0x334>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	f67f ae90 	bls.w	8000c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3724      	adds	r7, #36	@ 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40021400 	.word	0x40021400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40021c00 	.word	0x40021c00
 8000f84:	40013c00 	.word	0x40013c00

08000f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e267      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d075      	beq.n	8001092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa6:	4b88      	ldr	r3, [pc, #544]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d00c      	beq.n	8000fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fb2:	4b85      	ldr	r3, [pc, #532]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d112      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fbe:	4b82      	ldr	r3, [pc, #520]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fca:	d10b      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	4b7e      	ldr	r3, [pc, #504]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d05b      	beq.n	8001090 <HAL_RCC_OscConfig+0x108>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d157      	bne.n	8001090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e242      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fec:	d106      	bne.n	8000ffc <HAL_RCC_OscConfig+0x74>
 8000fee:	4b76      	ldr	r3, [pc, #472]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a75      	ldr	r2, [pc, #468]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e01d      	b.n	8001038 <HAL_RCC_OscConfig+0xb0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0x98>
 8001006:	4b70      	ldr	r3, [pc, #448]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6f      	ldr	r2, [pc, #444]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b6d      	ldr	r3, [pc, #436]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6c      	ldr	r2, [pc, #432]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00b      	b.n	8001038 <HAL_RCC_OscConfig+0xb0>
 8001020:	4b69      	ldr	r3, [pc, #420]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a68      	ldr	r2, [pc, #416]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b66      	ldr	r3, [pc, #408]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a65      	ldr	r2, [pc, #404]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fd18 	bl	8000a74 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fd14 	bl	8000a74 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	@ 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e207      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b5b      	ldr	r3, [pc, #364]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xc0>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fd04 	bl	8000a74 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fd00 	bl	8000a74 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	@ 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1f3      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	4b51      	ldr	r3, [pc, #324]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0xe8>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d063      	beq.n	8001166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109e:	4b4a      	ldr	r3, [pc, #296]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010aa:	4b47      	ldr	r3, [pc, #284]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d11c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b6:	4b44      	ldr	r3, [pc, #272]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d116      	bne.n	80010f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_RCC_OscConfig+0x152>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e1c7      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4937      	ldr	r1, [pc, #220]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	e03a      	b.n	8001166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f8:	4b34      	ldr	r3, [pc, #208]	@ (80011cc <HAL_RCC_OscConfig+0x244>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fe:	f7ff fcb9 	bl	8000a74 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fcb5 	bl	8000a74 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e1a8      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4925      	ldr	r1, [pc, #148]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
 8001138:	e015      	b.n	8001166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <HAL_RCC_OscConfig+0x244>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff fc98 	bl	8000a74 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fc94 	bl	8000a74 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e187      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d036      	beq.n	80011e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d016      	beq.n	80011a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <HAL_RCC_OscConfig+0x248>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001180:	f7ff fc78 	bl	8000a74 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc74 	bl	8000a74 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e167      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_RCC_OscConfig+0x240>)
 800119c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x200>
 80011a6:	e01b      	b.n	80011e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <HAL_RCC_OscConfig+0x248>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fc61 	bl	8000a74 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	e00e      	b.n	80011d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc5d 	bl	8000a74 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d907      	bls.n	80011d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e150      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
 80011c8:	40023800 	.word	0x40023800
 80011cc:	42470000 	.word	0x42470000
 80011d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d4:	4b88      	ldr	r3, [pc, #544]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 80011d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1ea      	bne.n	80011b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 8097 	beq.w	800131c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f2:	4b81      	ldr	r3, [pc, #516]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10f      	bne.n	800121e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b7d      	ldr	r3, [pc, #500]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a7c      	ldr	r2, [pc, #496]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b7a      	ldr	r3, [pc, #488]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121a:	2301      	movs	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121e:	4b77      	ldr	r3, [pc, #476]	@ (80013fc <HAL_RCC_OscConfig+0x474>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d118      	bne.n	800125c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122a:	4b74      	ldr	r3, [pc, #464]	@ (80013fc <HAL_RCC_OscConfig+0x474>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a73      	ldr	r2, [pc, #460]	@ (80013fc <HAL_RCC_OscConfig+0x474>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001236:	f7ff fc1d 	bl	8000a74 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123e:	f7ff fc19 	bl	8000a74 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e10c      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	4b6a      	ldr	r3, [pc, #424]	@ (80013fc <HAL_RCC_OscConfig+0x474>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x2ea>
 8001264:	4b64      	ldr	r3, [pc, #400]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001268:	4a63      	ldr	r2, [pc, #396]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001270:	e01c      	b.n	80012ac <HAL_RCC_OscConfig+0x324>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b05      	cmp	r3, #5
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x30c>
 800127a:	4b5f      	ldr	r3, [pc, #380]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127e:	4a5e      	ldr	r2, [pc, #376]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6713      	str	r3, [r2, #112]	@ 0x70
 8001286:	4b5c      	ldr	r3, [pc, #368]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128a:	4a5b      	ldr	r2, [pc, #364]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6713      	str	r3, [r2, #112]	@ 0x70
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0x324>
 8001294:	4b58      	ldr	r3, [pc, #352]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001298:	4a57      	ldr	r2, [pc, #348]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	6713      	str	r3, [r2, #112]	@ 0x70
 80012a0:	4b55      	ldr	r3, [pc, #340]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a4:	4a54      	ldr	r2, [pc, #336]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 80012a6:	f023 0304 	bic.w	r3, r3, #4
 80012aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d015      	beq.n	80012e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fbde 	bl	8000a74 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f7ff fbda 	bl	8000a74 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e0cb      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d2:	4b49      	ldr	r3, [pc, #292]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0ee      	beq.n	80012bc <HAL_RCC_OscConfig+0x334>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e0:	f7ff fbc8 	bl	8000a74 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff fbc4 	bl	8000a74 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0b5      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fe:	4b3e      	ldr	r3, [pc, #248]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ee      	bne.n	80012e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001310:	4b39      	ldr	r3, [pc, #228]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	4a38      	ldr	r2, [pc, #224]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80a1 	beq.w	8001468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001326:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b08      	cmp	r3, #8
 8001330:	d05c      	beq.n	80013ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d141      	bne.n	80013be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133a:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <HAL_RCC_OscConfig+0x478>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fb98 	bl	8000a74 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fb94 	bl	8000a74 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e087      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135a:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	3b01      	subs	r3, #1
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	491b      	ldr	r1, [pc, #108]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <HAL_RCC_OscConfig+0x478>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fb6d 	bl	8000a74 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff fb69 	bl	8000a74 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e05c      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x416>
 80013bc:	e054      	b.n	8001468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_RCC_OscConfig+0x478>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb56 	bl	8000a74 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fb52 	bl	8000a74 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e045      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x444>
 80013ea:	e03d      	b.n	8001468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d107      	bne.n	8001404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e038      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000
 8001400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_RCC_OscConfig+0x4ec>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d028      	beq.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141c:	429a      	cmp	r2, r3
 800141e:	d121      	bne.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d11a      	bne.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001434:	4013      	ands	r3, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800143a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800143c:	4293      	cmp	r3, r2
 800143e:	d111      	bne.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	3b01      	subs	r3, #1
 800144e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001450:	429a      	cmp	r2, r3
 8001452:	d107      	bne.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0cc      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800148c:	4b68      	ldr	r3, [pc, #416]	@ (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d90c      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b65      	ldr	r3, [pc, #404]	@ (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b63      	ldr	r3, [pc, #396]	@ (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0b8      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014cc:	4b59      	ldr	r3, [pc, #356]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a58      	ldr	r2, [pc, #352]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e4:	4b53      	ldr	r3, [pc, #332]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a52      	ldr	r2, [pc, #328]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f0:	4b50      	ldr	r3, [pc, #320]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	494d      	ldr	r1, [pc, #308]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d044      	beq.n	8001598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d119      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e07f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	2b03      	cmp	r3, #3
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4b3f      	ldr	r3, [pc, #252]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e06f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b3b      	ldr	r3, [pc, #236]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e067      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001556:	4b37      	ldr	r3, [pc, #220]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f023 0203 	bic.w	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4934      	ldr	r1, [pc, #208]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001568:	f7ff fa84 	bl	8000a74 <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	e00a      	b.n	8001586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff fa80 	bl	8000a74 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e04f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 020c 	and.w	r2, r3, #12
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d1eb      	bne.n	8001570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001598:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d20c      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e032      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4916      	ldr	r1, [pc, #88]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	490e      	ldr	r1, [pc, #56]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015fe:	f000 f821 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 8001602:	4602      	mov	r2, r0
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	490a      	ldr	r1, [pc, #40]	@ (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	5ccb      	ldrb	r3, [r1, r3]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f91c 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023c00 	.word	0x40023c00
 8001634:	40023800 	.word	0x40023800
 8001638:	08003dc8 	.word	0x08003dc8
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001648:	b094      	sub	sp, #80	@ 0x50
 800164a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001650:	2300      	movs	r3, #0
 8001652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001654:	2300      	movs	r3, #0
 8001656:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800165c:	4b79      	ldr	r3, [pc, #484]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d00d      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x40>
 8001668:	2b08      	cmp	r3, #8
 800166a:	f200 80e1 	bhi.w	8001830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x34>
 8001672:	2b04      	cmp	r3, #4
 8001674:	d003      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x3a>
 8001676:	e0db      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4b73      	ldr	r3, [pc, #460]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x204>)
 800167a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800167c:	e0db      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800167e:	4b73      	ldr	r3, [pc, #460]	@ (800184c <HAL_RCC_GetSysClockFreq+0x208>)
 8001680:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001682:	e0d8      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001684:	4b6f      	ldr	r3, [pc, #444]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800168c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168e:	4b6d      	ldr	r3, [pc, #436]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169a:	4b6a      	ldr	r3, [pc, #424]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	2200      	movs	r2, #0
 80016a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016b6:	4622      	mov	r2, r4
 80016b8:	462b      	mov	r3, r5
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	0159      	lsls	r1, r3, #5
 80016c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c8:	0150      	lsls	r0, r2, #5
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4621      	mov	r1, r4
 80016d0:	1a51      	subs	r1, r2, r1
 80016d2:	6139      	str	r1, [r7, #16]
 80016d4:	4629      	mov	r1, r5
 80016d6:	eb63 0301 	sbc.w	r3, r3, r1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016e8:	4659      	mov	r1, fp
 80016ea:	018b      	lsls	r3, r1, #6
 80016ec:	4651      	mov	r1, sl
 80016ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016f2:	4651      	mov	r1, sl
 80016f4:	018a      	lsls	r2, r1, #6
 80016f6:	4651      	mov	r1, sl
 80016f8:	ebb2 0801 	subs.w	r8, r2, r1
 80016fc:	4659      	mov	r1, fp
 80016fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800170e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001716:	4690      	mov	r8, r2
 8001718:	4699      	mov	r9, r3
 800171a:	4623      	mov	r3, r4
 800171c:	eb18 0303 	adds.w	r3, r8, r3
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	462b      	mov	r3, r5
 8001724:	eb49 0303 	adc.w	r3, r9, r3
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001736:	4629      	mov	r1, r5
 8001738:	024b      	lsls	r3, r1, #9
 800173a:	4621      	mov	r1, r4
 800173c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001740:	4621      	mov	r1, r4
 8001742:	024a      	lsls	r2, r1, #9
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800174a:	2200      	movs	r2, #0
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800174e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001754:	f7fe fd44 	bl	80001e0 <__aeabi_uldivmod>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4613      	mov	r3, r2
 800175e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001760:	e058      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001762:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	099b      	lsrs	r3, r3, #6
 8001768:	2200      	movs	r2, #0
 800176a:	4618      	mov	r0, r3
 800176c:	4611      	mov	r1, r2
 800176e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800177c:	4642      	mov	r2, r8
 800177e:	464b      	mov	r3, r9
 8001780:	f04f 0000 	mov.w	r0, #0
 8001784:	f04f 0100 	mov.w	r1, #0
 8001788:	0159      	lsls	r1, r3, #5
 800178a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800178e:	0150      	lsls	r0, r2, #5
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4641      	mov	r1, r8
 8001796:	ebb2 0a01 	subs.w	sl, r2, r1
 800179a:	4649      	mov	r1, r9
 800179c:	eb63 0b01 	sbc.w	fp, r3, r1
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017b4:	ebb2 040a 	subs.w	r4, r2, sl
 80017b8:	eb63 050b 	sbc.w	r5, r3, fp
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	00eb      	lsls	r3, r5, #3
 80017c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ca:	00e2      	lsls	r2, r4, #3
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	4643      	mov	r3, r8
 80017d2:	18e3      	adds	r3, r4, r3
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	464b      	mov	r3, r9
 80017d8:	eb45 0303 	adc.w	r3, r5, r3
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ea:	4629      	mov	r1, r5
 80017ec:	028b      	lsls	r3, r1, #10
 80017ee:	4621      	mov	r1, r4
 80017f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f4:	4621      	mov	r1, r4
 80017f6:	028a      	lsls	r2, r1, #10
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017fe:	2200      	movs	r2, #0
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	61fa      	str	r2, [r7, #28]
 8001804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001808:	f7fe fcea 	bl	80001e0 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4613      	mov	r3, r2
 8001812:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001824:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800182e:	e002      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x204>)
 8001832:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001838:	4618      	mov	r0, r3
 800183a:	3750      	adds	r7, #80	@ 0x50
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400
 800184c:	007a1200 	.word	0x007a1200

08001850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_RCC_GetHCLKFreq+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000

08001868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800186c:	f7ff fff0 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	0a9b      	lsrs	r3, r3, #10
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	4903      	ldr	r1, [pc, #12]	@ (800188c <HAL_RCC_GetPCLK1Freq+0x24>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	08003dd8 	.word	0x08003dd8

08001890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001894:	f7ff ffdc 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0b5b      	lsrs	r3, r3, #13
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	@ (80018b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08003dd8 	.word	0x08003dd8

080018b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	220f      	movs	r2, #15
 80018c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_RCC_GetClockConfig+0x5c>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HAL_RCC_GetClockConfig+0x5c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <HAL_RCC_GetClockConfig+0x5c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <HAL_RCC_GetClockConfig+0x60>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0207 	and.w	r2, r3, #7
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e041      	b.n	80019b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f839 	bl	80019ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f000 f9c0 	bl	8001ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d001      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e04e      	b.n	8001a86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d022      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a12:	d01d      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1f      	ldr	r2, [pc, #124]	@ (8001a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d018      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1e      	ldr	r2, [pc, #120]	@ (8001a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d013      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00e      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d009      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	@ (8001aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d004      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_TIM_Base_Start_IT+0xdc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d111      	bne.n	8001a74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d010      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a72:	e007      	b.n	8001a84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40010000 	.word	0x40010000
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40000800 	.word	0x40000800
 8001aa0:	40000c00 	.word	0x40000c00
 8001aa4:	40010400 	.word	0x40010400
 8001aa8:	40014000 	.word	0x40014000
 8001aac:	40001800 	.word	0x40001800

08001ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d020      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01b      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0202 	mvn.w	r2, #2
 8001ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8d2 	bl	8001ca4 <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8c4 	bl	8001c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8d5 	bl	8001cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d020      	beq.n	8001b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01b      	beq.n	8001b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0204 	mvn.w	r2, #4
 8001b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f8ac 	bl	8001ca4 <HAL_TIM_IC_CaptureCallback>
 8001b4c:	e005      	b.n	8001b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f89e 	bl	8001c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8af 	bl	8001cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d020      	beq.n	8001bac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01b      	beq.n	8001bac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0208 	mvn.w	r2, #8
 8001b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2204      	movs	r2, #4
 8001b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f886 	bl	8001ca4 <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f878 	bl	8001c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f889 	bl	8001cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d020      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01b      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0210 	mvn.w	r2, #16
 8001bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2208      	movs	r2, #8
 8001bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f860 	bl	8001ca4 <HAL_TIM_IC_CaptureCallback>
 8001be4:	e005      	b.n	8001bf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f852 	bl	8001c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f863 	bl	8001cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00c      	beq.n	8001c1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0201 	mvn.w	r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fd94 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00c      	beq.n	8001c40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f906 	bl	8001e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00c      	beq.n	8001c64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f834 	bl	8001ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0220 	mvn.w	r2, #32
 8001c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8d8 	bl	8001e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a46      	ldr	r2, [pc, #280]	@ (8001e0c <TIM_Base_SetConfig+0x12c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfe:	d00f      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a43      	ldr	r2, [pc, #268]	@ (8001e10 <TIM_Base_SetConfig+0x130>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00b      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a42      	ldr	r2, [pc, #264]	@ (8001e14 <TIM_Base_SetConfig+0x134>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a41      	ldr	r2, [pc, #260]	@ (8001e18 <TIM_Base_SetConfig+0x138>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a40      	ldr	r2, [pc, #256]	@ (8001e1c <TIM_Base_SetConfig+0x13c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a35      	ldr	r2, [pc, #212]	@ (8001e0c <TIM_Base_SetConfig+0x12c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d02b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d40:	d027      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a32      	ldr	r2, [pc, #200]	@ (8001e10 <TIM_Base_SetConfig+0x130>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d023      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a31      	ldr	r2, [pc, #196]	@ (8001e14 <TIM_Base_SetConfig+0x134>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a30      	ldr	r2, [pc, #192]	@ (8001e18 <TIM_Base_SetConfig+0x138>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <TIM_Base_SetConfig+0x13c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d017      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a2e      	ldr	r2, [pc, #184]	@ (8001e20 <TIM_Base_SetConfig+0x140>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001e24 <TIM_Base_SetConfig+0x144>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00f      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	@ (8001e28 <TIM_Base_SetConfig+0x148>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00b      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e2c <TIM_Base_SetConfig+0x14c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a2a      	ldr	r2, [pc, #168]	@ (8001e30 <TIM_Base_SetConfig+0x150>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d003      	beq.n	8001d92 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <TIM_Base_SetConfig+0x154>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d108      	bne.n	8001da4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a10      	ldr	r2, [pc, #64]	@ (8001e0c <TIM_Base_SetConfig+0x12c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <TIM_Base_SetConfig+0xf8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <TIM_Base_SetConfig+0x13c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d103      	bne.n	8001de0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f023 0201 	bic.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800
 8001e18:	40000c00 	.word	0x40000c00
 8001e1c:	40010400 	.word	0x40010400
 8001e20:	40014000 	.word	0x40014000
 8001e24:	40014400 	.word	0x40014400
 8001e28:	40014800 	.word	0x40014800
 8001e2c:	40001800 	.word	0x40001800
 8001e30:	40001c00 	.word	0x40001c00
 8001e34:	40002000 	.word	0x40002000

08001e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e042      	b.n	8001ef8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fca0 	bl	80007cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	@ 0x24
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f973 	bl	8002190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	@ 0x28
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d175      	bne.n	800200c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_UART_Transmit+0x2c>
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e06e      	b.n	800200e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2221      	movs	r2, #33	@ 0x21
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f3e:	f7fe fd99 	bl	8000a74 <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f58:	d108      	bne.n	8001f6c <HAL_UART_Transmit+0x6c>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e003      	b.n	8001f74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f74:	e02e      	b.n	8001fd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2180      	movs	r1, #128	@ 0x80
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f848 	bl	8002016 <UART_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e03a      	b.n	800200e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	e007      	b.n	8001fc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1cb      	bne.n	8001f76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2140      	movs	r1, #64	@ 0x40
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f814 	bl	8002016 <UART_WaitOnFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e006      	b.n	800200e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002026:	e03b      	b.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800202e:	d037      	beq.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002030:	f7fe fd20 	bl	8000a74 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	6a3a      	ldr	r2, [r7, #32]
 800203c:	429a      	cmp	r2, r3
 800203e:	d302      	bcc.n	8002046 <UART_WaitOnFlagUntilTimeout+0x30>
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e03a      	b.n	80020c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d023      	beq.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b80      	cmp	r3, #128	@ 0x80
 800205c:	d020      	beq.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b40      	cmp	r3, #64	@ 0x40
 8002062:	d01d      	beq.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b08      	cmp	r3, #8
 8002070:	d116      	bne.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f81d 	bl	80020c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2208      	movs	r2, #8
 8002092:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e00f      	b.n	80020c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d0b4      	beq.n	8002028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b095      	sub	sp, #84	@ 0x54
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	330c      	adds	r3, #12
 80020d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020da:	e853 3f00 	ldrex	r3, [r3]
 80020de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80020e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80020f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020f8:	e841 2300 	strex	r3, r2, [r1]
 80020fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80020fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e5      	bne.n	80020d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3314      	adds	r3, #20
 800210a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	e853 3f00 	ldrex	r3, [r3]
 8002112:	61fb      	str	r3, [r7, #28]
   return(result);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3314      	adds	r3, #20
 8002122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002124:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800212a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800212c:	e841 2300 	strex	r3, r2, [r1]
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e5      	bne.n	8002104 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	2b01      	cmp	r3, #1
 800213e:	d119      	bne.n	8002174 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	330c      	adds	r3, #12
 8002146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	e853 3f00 	ldrex	r3, [r3]
 800214e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f023 0310 	bic.w	r3, r3, #16
 8002156:	647b      	str	r3, [r7, #68]	@ 0x44
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	330c      	adds	r3, #12
 800215e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002160:	61ba      	str	r2, [r7, #24]
 8002162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002164:	6979      	ldr	r1, [r7, #20]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	e841 2300 	strex	r3, r2, [r1]
 800216c:	613b      	str	r3, [r7, #16]
   return(result);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e5      	bne.n	8002140 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002182:	bf00      	nop
 8002184:	3754      	adds	r7, #84	@ 0x54
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002194:	b0c0      	sub	sp, #256	@ 0x100
 8002196:	af00      	add	r7, sp, #0
 8002198:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80021a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ac:	68d9      	ldr	r1, [r3, #12]
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	ea40 0301 	orr.w	r3, r0, r1
 80021b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80021e8:	f021 010c 	bic.w	r1, r1, #12
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80021f6:	430b      	orrs	r3, r1
 80021f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220a:	6999      	ldr	r1, [r3, #24]
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	ea40 0301 	orr.w	r3, r0, r1
 8002216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b8f      	ldr	r3, [pc, #572]	@ (800245c <UART_SetConfig+0x2cc>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d005      	beq.n	8002230 <UART_SetConfig+0xa0>
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b8d      	ldr	r3, [pc, #564]	@ (8002460 <UART_SetConfig+0x2d0>)
 800222c:	429a      	cmp	r2, r3
 800222e:	d104      	bne.n	800223a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002230:	f7ff fb2e 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 8002234:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002238:	e003      	b.n	8002242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800223a:	f7ff fb15 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 800223e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800224c:	f040 810c 	bne.w	8002468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002254:	2200      	movs	r2, #0
 8002256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800225a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800225e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002262:	4622      	mov	r2, r4
 8002264:	462b      	mov	r3, r5
 8002266:	1891      	adds	r1, r2, r2
 8002268:	65b9      	str	r1, [r7, #88]	@ 0x58
 800226a:	415b      	adcs	r3, r3
 800226c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800226e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002272:	4621      	mov	r1, r4
 8002274:	eb12 0801 	adds.w	r8, r2, r1
 8002278:	4629      	mov	r1, r5
 800227a:	eb43 0901 	adc.w	r9, r3, r1
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800228a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002292:	4690      	mov	r8, r2
 8002294:	4699      	mov	r9, r3
 8002296:	4623      	mov	r3, r4
 8002298:	eb18 0303 	adds.w	r3, r8, r3
 800229c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80022a0:	462b      	mov	r3, r5
 80022a2:	eb49 0303 	adc.w	r3, r9, r3
 80022a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80022aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80022b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80022ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80022be:	460b      	mov	r3, r1
 80022c0:	18db      	adds	r3, r3, r3
 80022c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80022c4:	4613      	mov	r3, r2
 80022c6:	eb42 0303 	adc.w	r3, r2, r3
 80022ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80022cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80022d4:	f7fd ff84 	bl	80001e0 <__aeabi_uldivmod>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4b61      	ldr	r3, [pc, #388]	@ (8002464 <UART_SetConfig+0x2d4>)
 80022de:	fba3 2302 	umull	r2, r3, r3, r2
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	011c      	lsls	r4, r3, #4
 80022e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ea:	2200      	movs	r2, #0
 80022ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80022f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80022f8:	4642      	mov	r2, r8
 80022fa:	464b      	mov	r3, r9
 80022fc:	1891      	adds	r1, r2, r2
 80022fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002300:	415b      	adcs	r3, r3
 8002302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002308:	4641      	mov	r1, r8
 800230a:	eb12 0a01 	adds.w	sl, r2, r1
 800230e:	4649      	mov	r1, r9
 8002310:	eb43 0b01 	adc.w	fp, r3, r1
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002328:	4692      	mov	sl, r2
 800232a:	469b      	mov	fp, r3
 800232c:	4643      	mov	r3, r8
 800232e:	eb1a 0303 	adds.w	r3, sl, r3
 8002332:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002336:	464b      	mov	r3, r9
 8002338:	eb4b 0303 	adc.w	r3, fp, r3
 800233c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800234c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002354:	460b      	mov	r3, r1
 8002356:	18db      	adds	r3, r3, r3
 8002358:	643b      	str	r3, [r7, #64]	@ 0x40
 800235a:	4613      	mov	r3, r2
 800235c:	eb42 0303 	adc.w	r3, r2, r3
 8002360:	647b      	str	r3, [r7, #68]	@ 0x44
 8002362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800236a:	f7fd ff39 	bl	80001e0 <__aeabi_uldivmod>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4611      	mov	r1, r2
 8002374:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <UART_SetConfig+0x2d4>)
 8002376:	fba3 2301 	umull	r2, r3, r3, r1
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2264      	movs	r2, #100	@ 0x64
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	1acb      	subs	r3, r1, r3
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800238a:	4b36      	ldr	r3, [pc, #216]	@ (8002464 <UART_SetConfig+0x2d4>)
 800238c:	fba3 2302 	umull	r2, r3, r3, r2
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002398:	441c      	add	r4, r3
 800239a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800239e:	2200      	movs	r2, #0
 80023a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80023a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80023ac:	4642      	mov	r2, r8
 80023ae:	464b      	mov	r3, r9
 80023b0:	1891      	adds	r1, r2, r2
 80023b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023b4:	415b      	adcs	r3, r3
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80023bc:	4641      	mov	r1, r8
 80023be:	1851      	adds	r1, r2, r1
 80023c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80023c2:	4649      	mov	r1, r9
 80023c4:	414b      	adcs	r3, r1
 80023c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80023d4:	4659      	mov	r1, fp
 80023d6:	00cb      	lsls	r3, r1, #3
 80023d8:	4651      	mov	r1, sl
 80023da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023de:	4651      	mov	r1, sl
 80023e0:	00ca      	lsls	r2, r1, #3
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	4642      	mov	r2, r8
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023f0:	464b      	mov	r3, r9
 80023f2:	460a      	mov	r2, r1
 80023f4:	eb42 0303 	adc.w	r3, r2, r3
 80023f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002408:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800240c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002410:	460b      	mov	r3, r1
 8002412:	18db      	adds	r3, r3, r3
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002416:	4613      	mov	r3, r2
 8002418:	eb42 0303 	adc.w	r3, r2, r3
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800241e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002426:	f7fd fedb 	bl	80001e0 <__aeabi_uldivmod>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <UART_SetConfig+0x2d4>)
 8002430:	fba3 1302 	umull	r1, r3, r3, r2
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	2164      	movs	r1, #100	@ 0x64
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	3332      	adds	r3, #50	@ 0x32
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <UART_SetConfig+0x2d4>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	f003 0207 	and.w	r2, r3, #7
 800244e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4422      	add	r2, r4
 8002456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002458:	e106      	b.n	8002668 <UART_SetConfig+0x4d8>
 800245a:	bf00      	nop
 800245c:	40011000 	.word	0x40011000
 8002460:	40011400 	.word	0x40011400
 8002464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800246c:	2200      	movs	r2, #0
 800246e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002472:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800247a:	4642      	mov	r2, r8
 800247c:	464b      	mov	r3, r9
 800247e:	1891      	adds	r1, r2, r2
 8002480:	6239      	str	r1, [r7, #32]
 8002482:	415b      	adcs	r3, r3
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
 8002486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800248a:	4641      	mov	r1, r8
 800248c:	1854      	adds	r4, r2, r1
 800248e:	4649      	mov	r1, r9
 8002490:	eb43 0501 	adc.w	r5, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	00eb      	lsls	r3, r5, #3
 800249e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a2:	00e2      	lsls	r2, r4, #3
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	4643      	mov	r3, r8
 80024aa:	18e3      	adds	r3, r4, r3
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024b0:	464b      	mov	r3, r9
 80024b2:	eb45 0303 	adc.w	r3, r5, r3
 80024b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80024ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024d6:	4629      	mov	r1, r5
 80024d8:	008b      	lsls	r3, r1, #2
 80024da:	4621      	mov	r1, r4
 80024dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e0:	4621      	mov	r1, r4
 80024e2:	008a      	lsls	r2, r1, #2
 80024e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80024e8:	f7fd fe7a 	bl	80001e0 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4b60      	ldr	r3, [pc, #384]	@ (8002674 <UART_SetConfig+0x4e4>)
 80024f2:	fba3 2302 	umull	r2, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	011c      	lsls	r4, r3, #4
 80024fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800250c:	4642      	mov	r2, r8
 800250e:	464b      	mov	r3, r9
 8002510:	1891      	adds	r1, r2, r2
 8002512:	61b9      	str	r1, [r7, #24]
 8002514:	415b      	adcs	r3, r3
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251c:	4641      	mov	r1, r8
 800251e:	1851      	adds	r1, r2, r1
 8002520:	6139      	str	r1, [r7, #16]
 8002522:	4649      	mov	r1, r9
 8002524:	414b      	adcs	r3, r1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002534:	4659      	mov	r1, fp
 8002536:	00cb      	lsls	r3, r1, #3
 8002538:	4651      	mov	r1, sl
 800253a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800253e:	4651      	mov	r1, sl
 8002540:	00ca      	lsls	r2, r1, #3
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	4603      	mov	r3, r0
 8002548:	4642      	mov	r2, r8
 800254a:	189b      	adds	r3, r3, r2
 800254c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002550:	464b      	mov	r3, r9
 8002552:	460a      	mov	r2, r1
 8002554:	eb42 0303 	adc.w	r3, r2, r3
 8002558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002566:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002574:	4649      	mov	r1, r9
 8002576:	008b      	lsls	r3, r1, #2
 8002578:	4641      	mov	r1, r8
 800257a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800257e:	4641      	mov	r1, r8
 8002580:	008a      	lsls	r2, r1, #2
 8002582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002586:	f7fd fe2b 	bl	80001e0 <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4611      	mov	r1, r2
 8002590:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <UART_SetConfig+0x4e4>)
 8002592:	fba3 2301 	umull	r2, r3, r3, r1
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2264      	movs	r2, #100	@ 0x64
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	1acb      	subs	r3, r1, r3
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	3332      	adds	r3, #50	@ 0x32
 80025a4:	4a33      	ldr	r2, [pc, #204]	@ (8002674 <UART_SetConfig+0x4e4>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b0:	441c      	add	r4, r3
 80025b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025b6:	2200      	movs	r2, #0
 80025b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80025ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80025bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	1891      	adds	r1, r2, r2
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	415b      	adcs	r3, r3
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d0:	4641      	mov	r1, r8
 80025d2:	1851      	adds	r1, r2, r1
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	4649      	mov	r1, r9
 80025d8:	414b      	adcs	r3, r1
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025e8:	4659      	mov	r1, fp
 80025ea:	00cb      	lsls	r3, r1, #3
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f2:	4651      	mov	r1, sl
 80025f4:	00ca      	lsls	r2, r1, #3
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	4642      	mov	r2, r8
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002602:	464b      	mov	r3, r9
 8002604:	460a      	mov	r2, r1
 8002606:	eb42 0303 	adc.w	r3, r2, r3
 800260a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	663b      	str	r3, [r7, #96]	@ 0x60
 8002616:	667a      	str	r2, [r7, #100]	@ 0x64
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002624:	4649      	mov	r1, r9
 8002626:	008b      	lsls	r3, r1, #2
 8002628:	4641      	mov	r1, r8
 800262a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800262e:	4641      	mov	r1, r8
 8002630:	008a      	lsls	r2, r1, #2
 8002632:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002636:	f7fd fdd3 	bl	80001e0 <__aeabi_uldivmod>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <UART_SetConfig+0x4e4>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2164      	movs	r1, #100	@ 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	3332      	adds	r3, #50	@ 0x32
 8002652:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <UART_SetConfig+0x4e4>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4422      	add	r2, r4
 8002666:	609a      	str	r2, [r3, #8]
}
 8002668:	bf00      	nop
 800266a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800266e:	46bd      	mov	sp, r7
 8002670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002674:	51eb851f 	.word	0x51eb851f

08002678 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800268a:	2b84      	cmp	r3, #132	@ 0x84
 800268c:	d005      	beq.n	800269a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800268e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4413      	add	r3, r2
 8002696:	3303      	adds	r3, #3
 8002698:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026ac:	f000 fafc 	bl	8002ca8 <vTaskStartScheduler>
  
  return osOK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b8:	b089      	sub	sp, #36	@ 0x24
 80026ba:	af04      	add	r7, sp, #16
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <osThreadCreate+0x54>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01c      	beq.n	800270a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685c      	ldr	r4, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691e      	ldr	r6, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ffc8 	bl	8002678 <makeFreeRtosPriority>
 80026e8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026f2:	9202      	str	r2, [sp, #8]
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	9100      	str	r1, [sp, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4632      	mov	r2, r6
 80026fc:	4629      	mov	r1, r5
 80026fe:	4620      	mov	r0, r4
 8002700:	f000 f8ed 	bl	80028de <xTaskCreateStatic>
 8002704:	4603      	mov	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e01c      	b.n	8002744 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685c      	ldr	r4, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002716:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ffaa 	bl	8002678 <makeFreeRtosPriority>
 8002724:	4602      	mov	r2, r0
 8002726:	f107 030c 	add.w	r3, r7, #12
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	9200      	str	r2, [sp, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4632      	mov	r2, r6
 8002732:	4629      	mov	r1, r5
 8002734:	4620      	mov	r0, r4
 8002736:	f000 f932 	bl	800299e <xTaskCreate>
 800273a:	4603      	mov	r3, r0
 800273c:	2b01      	cmp	r3, #1
 800273e:	d001      	beq.n	8002744 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002744:	68fb      	ldr	r3, [r7, #12]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800274e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <osDelay+0x16>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	e000      	b.n	8002766 <osDelay+0x18>
 8002764:	2301      	movs	r3, #1
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fa68 	bl	8002c3c <vTaskDelay>
  
  return osOK;
 800276c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f103 0208 	add.w	r2, r3, #8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800278e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f103 0208 	add.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f103 0208 	add.w	r2, r3, #8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	601a      	str	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800282e:	d103      	bne.n	8002838 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e00c      	b.n	8002852 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3308      	adds	r3, #8
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e002      	b.n	8002846 <vListInsert+0x2e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d2f6      	bcs.n	8002840 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	601a      	str	r2, [r3, #0]
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6892      	ldr	r2, [r2, #8]
 80028a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6852      	ldr	r2, [r2, #4]
 80028aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d103      	bne.n	80028be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b08e      	sub	sp, #56	@ 0x38
 80028e2:	af04      	add	r7, sp, #16
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	e7fd      	b.n	8002906 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800290a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	61fb      	str	r3, [r7, #28]
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002928:	23a0      	movs	r3, #160	@ 0xa0
 800292a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002930:	d00b      	beq.n	800294a <xTaskCreateStatic+0x6c>
	__asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	61bb      	str	r3, [r7, #24]
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	e7fd      	b.n	8002946 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800294a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800294c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01e      	beq.n	8002990 <xTaskCreateStatic+0xb2>
 8002952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	2202      	movs	r2, #2
 8002966:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800296a:	2300      	movs	r3, #0
 800296c:	9303      	str	r3, [sp, #12]
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	9302      	str	r3, [sp, #8]
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f850 	bl	8002a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002988:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800298a:	f000 f8ed 	bl	8002b68 <prvAddNewTaskToReadyList>
 800298e:	e001      	b.n	8002994 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002994:	697b      	ldr	r3, [r7, #20]
	}
 8002996:	4618      	mov	r0, r3
 8002998:	3728      	adds	r7, #40	@ 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b08c      	sub	sp, #48	@ 0x30
 80029a2:	af04      	add	r7, sp, #16
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 ff00 	bl	80037b8 <pvPortMalloc>
 80029b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00e      	beq.n	80029de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029c0:	20a0      	movs	r0, #160	@ 0xa0
 80029c2:	f000 fef9 	bl	80037b8 <pvPortMalloc>
 80029c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80029d4:	e005      	b.n	80029e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f000 ffbc 	bl	8003954 <vPortFree>
 80029dc:	e001      	b.n	80029e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d017      	beq.n	8002a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	2300      	movs	r3, #0
 80029f4:	9303      	str	r3, [sp, #12]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	9302      	str	r3, [sp, #8]
 80029fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f80e 	bl	8002a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a0c:	69f8      	ldr	r0, [r7, #28]
 8002a0e:	f000 f8ab 	bl	8002b68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	e002      	b.n	8002a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a40:	3b01      	subs	r3, #1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f023 0307 	bic.w	r3, r3, #7
 8002a4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	617b      	str	r3, [r7, #20]
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	e7fd      	b.n	8002a6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01f      	beq.n	8002ab8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	e012      	b.n	8002aa4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	7819      	ldrb	r1, [r3, #0]
 8002a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3334      	adds	r3, #52	@ 0x34
 8002a8e:	460a      	mov	r2, r1
 8002a90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	d9e9      	bls.n	8002a7e <prvInitialiseNewTask+0x56>
 8002aaa:	e000      	b.n	8002aae <prvInitialiseNewTask+0x86>
			{
				break;
 8002aac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ab6:	e003      	b.n	8002ac0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d901      	bls.n	8002aca <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002acc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ace:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad8:	2200      	movs	r2, #0
 8002ada:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fe68 	bl	80027b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	3318      	adds	r3, #24
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fe63 	bl	80027b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af8:	f1c3 0207 	rsb	r2, r3, #7
 8002afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b04:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	334c      	adds	r3, #76	@ 0x4c
 8002b1a:	224c      	movs	r2, #76	@ 0x4c
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 f838 	bl	8003b94 <memset>
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <prvInitialiseNewTask+0x134>)
 8002b28:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b60 <prvInitialiseNewTask+0x138>)
 8002b2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	4a0c      	ldr	r2, [pc, #48]	@ (8002b64 <prvInitialiseNewTask+0x13c>)
 8002b34:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	69b8      	ldr	r0, [r7, #24]
 8002b3c:	f000 fc2a 	bl	8003394 <pxPortInitialiseStack>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b52:	bf00      	nop
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20004108 	.word	0x20004108
 8002b60:	20004170 	.word	0x20004170
 8002b64:	200041d8 	.word	0x200041d8

08002b68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b70:	f000 fd42 	bl	80035f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b74:	4b2a      	ldr	r3, [pc, #168]	@ (8002c20 <prvAddNewTaskToReadyList+0xb8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4a29      	ldr	r2, [pc, #164]	@ (8002c20 <prvAddNewTaskToReadyList+0xb8>)
 8002b7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b7e:	4b29      	ldr	r3, [pc, #164]	@ (8002c24 <prvAddNewTaskToReadyList+0xbc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b86:	4a27      	ldr	r2, [pc, #156]	@ (8002c24 <prvAddNewTaskToReadyList+0xbc>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b8c:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <prvAddNewTaskToReadyList+0xb8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d110      	bne.n	8002bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b94:	f000 fad4 	bl	8003140 <prvInitialiseTaskLists>
 8002b98:	e00d      	b.n	8002bb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b9a:	4b23      	ldr	r3, [pc, #140]	@ (8002c28 <prvAddNewTaskToReadyList+0xc0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <prvAddNewTaskToReadyList+0xbc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d802      	bhi.n	8002bb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c24 <prvAddNewTaskToReadyList+0xbc>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <prvAddNewTaskToReadyList+0xc4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <prvAddNewTaskToReadyList+0xc4>)
 8002bbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <prvAddNewTaskToReadyList+0xc8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <prvAddNewTaskToReadyList+0xc8>)
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4a15      	ldr	r2, [pc, #84]	@ (8002c34 <prvAddNewTaskToReadyList+0xcc>)
 8002be0:	441a      	add	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3304      	adds	r3, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4610      	mov	r0, r2
 8002bea:	f7ff fdf1 	bl	80027d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bee:	f000 fd35 	bl	800365c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <prvAddNewTaskToReadyList+0xc0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00e      	beq.n	8002c18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <prvAddNewTaskToReadyList+0xbc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d207      	bcs.n	8002c18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c08:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <prvAddNewTaskToReadyList+0xd0>)
 8002c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200004b4 	.word	0x200004b4
 8002c24:	200003b4 	.word	0x200003b4
 8002c28:	200004c0 	.word	0x200004c0
 8002c2c:	200004d0 	.word	0x200004d0
 8002c30:	200004bc 	.word	0x200004bc
 8002c34:	200003b8 	.word	0x200003b8
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ca0 <vTaskDelay+0x64>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <vTaskDelay+0x32>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	60bb      	str	r3, [r7, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c6e:	f000 f885 	bl	8002d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c72:	2100      	movs	r1, #0
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fb27 	bl	80032c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c7a:	f000 f88d 	bl	8002d98 <xTaskResumeAll>
 8002c7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d107      	bne.n	8002c96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002c86:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <vTaskDelay+0x68>)
 8002c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200004dc 	.word	0x200004dc
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	@ 0x28
 8002cac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cb6:	463a      	mov	r2, r7
 8002cb8:	1d39      	adds	r1, r7, #4
 8002cba:	f107 0308 	add.w	r3, r7, #8
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc06 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	9202      	str	r2, [sp, #8]
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	4921      	ldr	r1, [pc, #132]	@ (8002d5c <vTaskStartScheduler+0xb4>)
 8002cd8:	4821      	ldr	r0, [pc, #132]	@ (8002d60 <vTaskStartScheduler+0xb8>)
 8002cda:	f7ff fe00 	bl	80028de <xTaskCreateStatic>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a20      	ldr	r2, [pc, #128]	@ (8002d64 <vTaskStartScheduler+0xbc>)
 8002ce2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <vTaskStartScheduler+0xbc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002cec:	2301      	movs	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e001      	b.n	8002cf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d11b      	bne.n	8002d34 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	613b      	str	r3, [r7, #16]
}
 8002d0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d10:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <vTaskStartScheduler+0xc0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	334c      	adds	r3, #76	@ 0x4c
 8002d16:	4a15      	ldr	r2, [pc, #84]	@ (8002d6c <vTaskStartScheduler+0xc4>)
 8002d18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <vTaskStartScheduler+0xc8>)
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d22:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <vTaskStartScheduler+0xcc>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <vTaskStartScheduler+0xd0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d2e:	f000 fbbf 	bl	80034b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d32:	e00f      	b.n	8002d54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d3a:	d10b      	bne.n	8002d54 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	60fb      	str	r3, [r7, #12]
}
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <vTaskStartScheduler+0xa8>
}
 8002d54:	bf00      	nop
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	08003dc0 	.word	0x08003dc0
 8002d60:	08003111 	.word	0x08003111
 8002d64:	200004d8 	.word	0x200004d8
 8002d68:	200003b4 	.word	0x200003b4
 8002d6c:	20000010 	.word	0x20000010
 8002d70:	200004d4 	.word	0x200004d4
 8002d74:	200004c0 	.word	0x200004c0
 8002d78:	200004b8 	.word	0x200004b8

08002d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d80:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <vTaskSuspendAll+0x18>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a03      	ldr	r2, [pc, #12]	@ (8002d94 <vTaskSuspendAll+0x18>)
 8002d88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	200004dc 	.word	0x200004dc

08002d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002da6:	4b42      	ldr	r3, [pc, #264]	@ (8002eb0 <xTaskResumeAll+0x118>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <xTaskResumeAll+0x2e>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	603b      	str	r3, [r7, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dc6:	f000 fc17 	bl	80035f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dca:	4b39      	ldr	r3, [pc, #228]	@ (8002eb0 <xTaskResumeAll+0x118>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	4a37      	ldr	r2, [pc, #220]	@ (8002eb0 <xTaskResumeAll+0x118>)
 8002dd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dd4:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <xTaskResumeAll+0x118>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d161      	bne.n	8002ea0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ddc:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <xTaskResumeAll+0x11c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d05d      	beq.n	8002ea0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002de4:	e02e      	b.n	8002e44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002de6:	4b34      	ldr	r3, [pc, #208]	@ (8002eb8 <xTaskResumeAll+0x120>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3318      	adds	r3, #24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fd49 	bl	800288a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fd44 	bl	800288a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	2201      	movs	r2, #1
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ebc <xTaskResumeAll+0x124>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	4a2a      	ldr	r2, [pc, #168]	@ (8002ebc <xTaskResumeAll+0x124>)
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4a27      	ldr	r2, [pc, #156]	@ (8002ec0 <xTaskResumeAll+0x128>)
 8002e22:	441a      	add	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3304      	adds	r3, #4
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f7ff fcd0 	bl	80027d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e34:	4b23      	ldr	r3, [pc, #140]	@ (8002ec4 <xTaskResumeAll+0x12c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ec8 <xTaskResumeAll+0x130>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e44:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb8 <xTaskResumeAll+0x120>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1cc      	bne.n	8002de6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e52:	f000 fa19 	bl	8003288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <xTaskResumeAll+0x134>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e62:	f000 f837 	bl	8002ed4 <xTaskIncrementTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	@ (8002ec8 <xTaskResumeAll+0x130>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f1      	bne.n	8002e62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <xTaskResumeAll+0x134>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e84:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <xTaskResumeAll+0x130>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <xTaskResumeAll+0x138>)
 8002e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ea0:	f000 fbdc 	bl	800365c <vPortExitCritical>

	return xAlreadyYielded;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200004dc 	.word	0x200004dc
 8002eb4:	200004b4 	.word	0x200004b4
 8002eb8:	20000474 	.word	0x20000474
 8002ebc:	200004bc 	.word	0x200004bc
 8002ec0:	200003b8 	.word	0x200003b8
 8002ec4:	200003b4 	.word	0x200003b4
 8002ec8:	200004c8 	.word	0x200004c8
 8002ecc:	200004c4 	.word	0x200004c4
 8002ed0:	e000ed04 	.word	0xe000ed04

08002ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ede:	4b4f      	ldr	r3, [pc, #316]	@ (800301c <xTaskIncrementTick+0x148>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 808f 	bne.w	8003006 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8003020 <xTaskIncrementTick+0x14c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8003020 <xTaskIncrementTick+0x14c>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d121      	bne.n	8002f40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002efc:	4b49      	ldr	r3, [pc, #292]	@ (8003024 <xTaskIncrementTick+0x150>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	603b      	str	r3, [r7, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	e7fd      	b.n	8002f1a <xTaskIncrementTick+0x46>
 8002f1e:	4b41      	ldr	r3, [pc, #260]	@ (8003024 <xTaskIncrementTick+0x150>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	4b40      	ldr	r3, [pc, #256]	@ (8003028 <xTaskIncrementTick+0x154>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a3e      	ldr	r2, [pc, #248]	@ (8003024 <xTaskIncrementTick+0x150>)
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8003028 <xTaskIncrementTick+0x154>)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b3e      	ldr	r3, [pc, #248]	@ (800302c <xTaskIncrementTick+0x158>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	4a3c      	ldr	r2, [pc, #240]	@ (800302c <xTaskIncrementTick+0x158>)
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	f000 f9a4 	bl	8003288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f40:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <xTaskIncrementTick+0x15c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d348      	bcc.n	8002fdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f4a:	4b36      	ldr	r3, [pc, #216]	@ (8003024 <xTaskIncrementTick+0x150>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f54:	4b36      	ldr	r3, [pc, #216]	@ (8003030 <xTaskIncrementTick+0x15c>)
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f5a:	601a      	str	r2, [r3, #0]
					break;
 8002f5c:	e03e      	b.n	8002fdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f5e:	4b31      	ldr	r3, [pc, #196]	@ (8003024 <xTaskIncrementTick+0x150>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d203      	bcs.n	8002f7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f76:	4a2e      	ldr	r2, [pc, #184]	@ (8003030 <xTaskIncrementTick+0x15c>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f7c:	e02e      	b.n	8002fdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fc81 	bl	800288a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3318      	adds	r3, #24
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fc78 	bl	800288a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	4b24      	ldr	r3, [pc, #144]	@ (8003034 <xTaskIncrementTick+0x160>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <xTaskIncrementTick+0x160>)
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <xTaskIncrementTick+0x164>)
 8002fba:	441a      	add	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7ff fc04 	bl	80027d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <xTaskIncrementTick+0x168>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3b9      	bcc.n	8002f4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fda:	e7b6      	b.n	8002f4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fdc:	4b17      	ldr	r3, [pc, #92]	@ (800303c <xTaskIncrementTick+0x168>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe2:	4915      	ldr	r1, [pc, #84]	@ (8003038 <xTaskIncrementTick+0x164>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d901      	bls.n	8002ff8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <xTaskIncrementTick+0x16c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	e004      	b.n	8003010 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003006:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <xTaskIncrementTick+0x170>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a0d      	ldr	r2, [pc, #52]	@ (8003044 <xTaskIncrementTick+0x170>)
 800300e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003010:	697b      	ldr	r3, [r7, #20]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200004dc 	.word	0x200004dc
 8003020:	200004b8 	.word	0x200004b8
 8003024:	2000046c 	.word	0x2000046c
 8003028:	20000470 	.word	0x20000470
 800302c:	200004cc 	.word	0x200004cc
 8003030:	200004d4 	.word	0x200004d4
 8003034:	200004bc 	.word	0x200004bc
 8003038:	200003b8 	.word	0x200003b8
 800303c:	200003b4 	.word	0x200003b4
 8003040:	200004c8 	.word	0x200004c8
 8003044:	200004c4 	.word	0x200004c4

08003048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800304e:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <vTaskSwitchContext+0xb0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003056:	4b29      	ldr	r3, [pc, #164]	@ (80030fc <vTaskSwitchContext+0xb4>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800305c:	e045      	b.n	80030ea <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800305e:	4b27      	ldr	r3, [pc, #156]	@ (80030fc <vTaskSwitchContext+0xb4>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003064:	4b26      	ldr	r3, [pc, #152]	@ (8003100 <vTaskSwitchContext+0xb8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	f1c3 031f 	rsb	r3, r3, #31
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	4922      	ldr	r1, [pc, #136]	@ (8003104 <vTaskSwitchContext+0xbc>)
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	607b      	str	r3, [r7, #4]
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	e7fd      	b.n	80030a2 <vTaskSwitchContext+0x5a>
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4a14      	ldr	r2, [pc, #80]	@ (8003104 <vTaskSwitchContext+0xbc>)
 80030b2:	4413      	add	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	3308      	adds	r3, #8
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d104      	bne.n	80030d6 <vTaskSwitchContext+0x8e>
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <vTaskSwitchContext+0xc0>)
 80030de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030e0:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <vTaskSwitchContext+0xc0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	334c      	adds	r3, #76	@ 0x4c
 80030e6:	4a09      	ldr	r2, [pc, #36]	@ (800310c <vTaskSwitchContext+0xc4>)
 80030e8:	6013      	str	r3, [r2, #0]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	200004dc 	.word	0x200004dc
 80030fc:	200004c8 	.word	0x200004c8
 8003100:	200004bc 	.word	0x200004bc
 8003104:	200003b8 	.word	0x200003b8
 8003108:	200003b4 	.word	0x200003b4
 800310c:	20000010 	.word	0x20000010

08003110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003118:	f000 f852 	bl	80031c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <prvIdleTask+0x28>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d9f9      	bls.n	8003118 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <prvIdleTask+0x2c>)
 8003126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003134:	e7f0      	b.n	8003118 <prvIdleTask+0x8>
 8003136:	bf00      	nop
 8003138:	200003b8 	.word	0x200003b8
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	e00c      	b.n	8003166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4a12      	ldr	r2, [pc, #72]	@ (80031a0 <prvInitialiseTaskLists+0x60>)
 8003158:	4413      	add	r3, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fb0b 	bl	8002776 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3301      	adds	r3, #1
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b06      	cmp	r3, #6
 800316a:	d9ef      	bls.n	800314c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800316c:	480d      	ldr	r0, [pc, #52]	@ (80031a4 <prvInitialiseTaskLists+0x64>)
 800316e:	f7ff fb02 	bl	8002776 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003172:	480d      	ldr	r0, [pc, #52]	@ (80031a8 <prvInitialiseTaskLists+0x68>)
 8003174:	f7ff faff 	bl	8002776 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003178:	480c      	ldr	r0, [pc, #48]	@ (80031ac <prvInitialiseTaskLists+0x6c>)
 800317a:	f7ff fafc 	bl	8002776 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800317e:	480c      	ldr	r0, [pc, #48]	@ (80031b0 <prvInitialiseTaskLists+0x70>)
 8003180:	f7ff faf9 	bl	8002776 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003184:	480b      	ldr	r0, [pc, #44]	@ (80031b4 <prvInitialiseTaskLists+0x74>)
 8003186:	f7ff faf6 	bl	8002776 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800318a:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <prvInitialiseTaskLists+0x78>)
 800318c:	4a05      	ldr	r2, [pc, #20]	@ (80031a4 <prvInitialiseTaskLists+0x64>)
 800318e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003190:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <prvInitialiseTaskLists+0x7c>)
 8003192:	4a05      	ldr	r2, [pc, #20]	@ (80031a8 <prvInitialiseTaskLists+0x68>)
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200003b8 	.word	0x200003b8
 80031a4:	20000444 	.word	0x20000444
 80031a8:	20000458 	.word	0x20000458
 80031ac:	20000474 	.word	0x20000474
 80031b0:	20000488 	.word	0x20000488
 80031b4:	200004a0 	.word	0x200004a0
 80031b8:	2000046c 	.word	0x2000046c
 80031bc:	20000470 	.word	0x20000470

080031c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031c6:	e019      	b.n	80031fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031c8:	f000 fa16 	bl	80035f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031cc:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <prvCheckTasksWaitingTermination+0x50>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fb56 	bl	800288a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031de:	4b0d      	ldr	r3, [pc, #52]	@ (8003214 <prvCheckTasksWaitingTermination+0x54>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003214 <prvCheckTasksWaitingTermination+0x54>)
 80031e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <prvCheckTasksWaitingTermination+0x58>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <prvCheckTasksWaitingTermination+0x58>)
 80031f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031f2:	f000 fa33 	bl	800365c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f810 	bl	800321c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <prvCheckTasksWaitingTermination+0x58>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e1      	bne.n	80031c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000488 	.word	0x20000488
 8003214:	200004b4 	.word	0x200004b4
 8003218:	2000049c 	.word	0x2000049c

0800321c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	334c      	adds	r3, #76	@ 0x4c
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fcbb 	bl	8003ba4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fb89 	bl	8003954 <vPortFree>
				vPortFree( pxTCB );
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb86 	bl	8003954 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003248:	e019      	b.n	800327e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003250:	2b01      	cmp	r3, #1
 8003252:	d103      	bne.n	800325c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fb7d 	bl	8003954 <vPortFree>
	}
 800325a:	e010      	b.n	800327e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003262:	2b02      	cmp	r3, #2
 8003264:	d00b      	beq.n	800327e <prvDeleteTCB+0x62>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	60fb      	str	r3, [r7, #12]
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	e7fd      	b.n	800327a <prvDeleteTCB+0x5e>
	}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <prvResetNextTaskUnblockTime+0x38>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <prvResetNextTaskUnblockTime+0x3c>)
 800329a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800329e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032a0:	e008      	b.n	80032b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a2:	4b07      	ldr	r3, [pc, #28]	@ (80032c0 <prvResetNextTaskUnblockTime+0x38>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <prvResetNextTaskUnblockTime+0x3c>)
 80032b2:	6013      	str	r3, [r2, #0]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	2000046c 	.word	0x2000046c
 80032c4:	200004d4 	.word	0x200004d4

080032c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032d2:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <prvAddCurrentTaskToDelayedList+0xb0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3304      	adds	r3, #4
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fad3 	bl	800288a <uxListRemove>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	2201      	movs	r2, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	4b21      	ldr	r3, [pc, #132]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4013      	ands	r3, r2
 80032fe:	4a20      	ldr	r2, [pc, #128]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003300:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003308:	d10a      	bne.n	8003320 <prvAddCurrentTaskToDelayedList+0x58>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003310:	4b1a      	ldr	r3, [pc, #104]	@ (800337c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3304      	adds	r3, #4
 8003316:	4619      	mov	r1, r3
 8003318:	481a      	ldr	r0, [pc, #104]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xbc>)
 800331a:	f7ff fa59 	bl	80027d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800331e:	e026      	b.n	800336e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003328:	4b14      	ldr	r3, [pc, #80]	@ (800337c <prvAddCurrentTaskToDelayedList+0xb4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d209      	bcs.n	800334c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003338:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <prvAddCurrentTaskToDelayedList+0xc0>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b0f      	ldr	r3, [pc, #60]	@ (800337c <prvAddCurrentTaskToDelayedList+0xb4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3304      	adds	r3, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f7ff fa67 	bl	8002818 <vListInsert>
}
 800334a:	e010      	b.n	800336e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <prvAddCurrentTaskToDelayedList+0xc4>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3304      	adds	r3, #4
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f7ff fa5d 	bl	8002818 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800335e:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	d202      	bcs.n	800336e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003368:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xc8>)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	6013      	str	r3, [r2, #0]
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200004b8 	.word	0x200004b8
 800337c:	200003b4 	.word	0x200003b4
 8003380:	200004bc 	.word	0x200004bc
 8003384:	200004a0 	.word	0x200004a0
 8003388:	20000470 	.word	0x20000470
 800338c:	2000046c 	.word	0x2000046c
 8003390:	200004d4 	.word	0x200004d4

08003394 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3b04      	subs	r3, #4
 80033a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3b04      	subs	r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f023 0201 	bic.w	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3b04      	subs	r3, #4
 80033c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033c4:	4a0c      	ldr	r2, [pc, #48]	@ (80033f8 <pxPortInitialiseStack+0x64>)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3b14      	subs	r3, #20
 80033ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3b04      	subs	r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f06f 0202 	mvn.w	r2, #2
 80033e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3b20      	subs	r3, #32
 80033e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	080033fd 	.word	0x080033fd

080033fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003406:	4b13      	ldr	r3, [pc, #76]	@ (8003454 <prvTaskExitError+0x58>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800340e:	d00b      	beq.n	8003428 <prvTaskExitError+0x2c>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	60fb      	str	r3, [r7, #12]
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <prvTaskExitError+0x28>
	__asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	60bb      	str	r3, [r7, #8]
}
 800343a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800343c:	bf00      	nop
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0fc      	beq.n	800343e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c
	...

08003460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003460:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <pxCurrentTCBConst2>)
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	6808      	ldr	r0, [r1, #0]
 8003466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346a:	f380 8809 	msr	PSP, r0
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f04f 0000 	mov.w	r0, #0
 8003476:	f380 8811 	msr	BASEPRI, r0
 800347a:	4770      	bx	lr
 800347c:	f3af 8000 	nop.w

08003480 <pxCurrentTCBConst2>:
 8003480:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop

08003488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003488:	4808      	ldr	r0, [pc, #32]	@ (80034ac <prvPortStartFirstTask+0x24>)
 800348a:	6800      	ldr	r0, [r0, #0]
 800348c:	6800      	ldr	r0, [r0, #0]
 800348e:	f380 8808 	msr	MSP, r0
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f380 8814 	msr	CONTROL, r0
 800349a:	b662      	cpsie	i
 800349c:	b661      	cpsie	f
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	df00      	svc	0
 80034a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80034aa:	bf00      	nop
 80034ac:	e000ed08 	.word	0xe000ed08

080034b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034b6:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <xPortStartScheduler+0x124>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a47      	ldr	r2, [pc, #284]	@ (80035d8 <xPortStartScheduler+0x128>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10b      	bne.n	80034d8 <xPortStartScheduler+0x28>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	613b      	str	r3, [r7, #16]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034d8:	4b3e      	ldr	r3, [pc, #248]	@ (80035d4 <xPortStartScheduler+0x124>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3f      	ldr	r2, [pc, #252]	@ (80035dc <xPortStartScheduler+0x12c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10b      	bne.n	80034fa <xPortStartScheduler+0x4a>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	60fb      	str	r3, [r7, #12]
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	e7fd      	b.n	80034f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034fa:	4b39      	ldr	r3, [pc, #228]	@ (80035e0 <xPortStartScheduler+0x130>)
 80034fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	22ff      	movs	r2, #255	@ 0xff
 800350a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4b31      	ldr	r3, [pc, #196]	@ (80035e4 <xPortStartScheduler+0x134>)
 8003520:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003522:	4b31      	ldr	r3, [pc, #196]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003524:	2207      	movs	r2, #7
 8003526:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003528:	e009      	b.n	800353e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800352a:	4b2f      	ldr	r3, [pc, #188]	@ (80035e8 <xPortStartScheduler+0x138>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3b01      	subs	r3, #1
 8003530:	4a2d      	ldr	r2, [pc, #180]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003532:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003546:	2b80      	cmp	r3, #128	@ 0x80
 8003548:	d0ef      	beq.n	800352a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800354a:	4b27      	ldr	r3, [pc, #156]	@ (80035e8 <xPortStartScheduler+0x138>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f1c3 0307 	rsb	r3, r3, #7
 8003552:	2b04      	cmp	r3, #4
 8003554:	d00b      	beq.n	800356e <xPortStartScheduler+0xbe>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60bb      	str	r3, [r7, #8]
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	e7fd      	b.n	800356a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800356e:	4b1e      	ldr	r3, [pc, #120]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003578:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <xPortStartScheduler+0x138>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003580:	4a19      	ldr	r2, [pc, #100]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800358c:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <xPortStartScheduler+0x13c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <xPortStartScheduler+0x13c>)
 8003592:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003598:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <xPortStartScheduler+0x13c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <xPortStartScheduler+0x13c>)
 800359e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80035a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035a4:	f000 f8da 	bl	800375c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <xPortStartScheduler+0x140>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035ae:	f000 f8f9 	bl	80037a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035b2:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <xPortStartScheduler+0x144>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0f      	ldr	r2, [pc, #60]	@ (80035f4 <xPortStartScheduler+0x144>)
 80035b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80035bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035be:	f7ff ff63 	bl	8003488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035c2:	f7ff fd41 	bl	8003048 <vTaskSwitchContext>
	prvTaskExitError();
 80035c6:	f7ff ff19 	bl	80033fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	e000ed00 	.word	0xe000ed00
 80035d8:	410fc271 	.word	0x410fc271
 80035dc:	410fc270 	.word	0x410fc270
 80035e0:	e000e400 	.word	0xe000e400
 80035e4:	200004e0 	.word	0x200004e0
 80035e8:	200004e4 	.word	0x200004e4
 80035ec:	e000ed20 	.word	0xe000ed20
 80035f0:	2000000c 	.word	0x2000000c
 80035f4:	e000ef34 	.word	0xe000ef34

080035f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	607b      	str	r3, [r7, #4]
}
 8003610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <vPortEnterCritical+0x5c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	4a0e      	ldr	r2, [pc, #56]	@ (8003654 <vPortEnterCritical+0x5c>)
 800361a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800361c:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <vPortEnterCritical+0x5c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d110      	bne.n	8003646 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003624:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <vPortEnterCritical+0x60>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <vPortEnterCritical+0x4e>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	603b      	str	r3, [r7, #0]
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	e7fd      	b.n	8003642 <vPortEnterCritical+0x4a>
	}
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000000c 	.word	0x2000000c
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003662:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <vPortExitCritical+0x50>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <vPortExitCritical+0x26>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	607b      	str	r3, [r7, #4]
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <vPortExitCritical+0x50>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3b01      	subs	r3, #1
 8003688:	4a08      	ldr	r2, [pc, #32]	@ (80036ac <vPortExitCritical+0x50>)
 800368a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <vPortExitCritical+0x50>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <vPortExitCritical+0x44>
 8003694:	2300      	movs	r3, #0
 8003696:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800369e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036b0:	f3ef 8009 	mrs	r0, PSP
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <pxCurrentTCBConst>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	f01e 0f10 	tst.w	lr, #16
 80036c0:	bf08      	it	eq
 80036c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ca:	6010      	str	r0, [r2, #0]
 80036cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80036d4:	f380 8811 	msr	BASEPRI, r0
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f7ff fcb2 	bl	8003048 <vTaskSwitchContext>
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f380 8811 	msr	BASEPRI, r0
 80036ec:	bc09      	pop	{r0, r3}
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	6808      	ldr	r0, [r1, #0]
 80036f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f6:	f01e 0f10 	tst.w	lr, #16
 80036fa:	bf08      	it	eq
 80036fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003700:	f380 8809 	msr	PSP, r0
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	f3af 8000 	nop.w

08003710 <pxCurrentTCBConst>:
 8003710:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop

08003718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	607b      	str	r3, [r7, #4]
}
 8003730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003732:	f7ff fbcf 	bl	8002ed4 <xTaskIncrementTick>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <SysTick_Handler+0x40>)
 800373e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f383 8811 	msr	BASEPRI, r3
}
 800374e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <vPortSetupTimerInterrupt+0x34>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003766:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <vPortSetupTimerInterrupt+0x38>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800376c:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <vPortSetupTimerInterrupt+0x3c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <vPortSetupTimerInterrupt+0x40>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	4a09      	ldr	r2, [pc, #36]	@ (80037a0 <vPortSetupTimerInterrupt+0x44>)
 800377a:	3b01      	subs	r3, #1
 800377c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800377e:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <vPortSetupTimerInterrupt+0x34>)
 8003780:	2207      	movs	r2, #7
 8003782:	601a      	str	r2, [r3, #0]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e010 	.word	0xe000e010
 8003794:	e000e018 	.word	0xe000e018
 8003798:	20000000 	.word	0x20000000
 800379c:	10624dd3 	.word	0x10624dd3
 80037a0:	e000e014 	.word	0xe000e014

080037a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80037b4 <vPortEnableVFP+0x10>
 80037a8:	6801      	ldr	r1, [r0, #0]
 80037aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80037ae:	6001      	str	r1, [r0, #0]
 80037b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037b2:	bf00      	nop
 80037b4:	e000ed88 	.word	0xe000ed88

080037b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	@ 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80037c4:	f7ff fada 	bl	8002d7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037c8:	4b5c      	ldr	r3, [pc, #368]	@ (800393c <pvPortMalloc+0x184>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80037d0:	f000 f924 	bl	8003a1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003940 <pvPortMalloc+0x188>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 8095 	bne.w	800390c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01e      	beq.n	8003826 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80037e8:	2208      	movs	r2, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f023 0307 	bic.w	r3, r3, #7
 8003800:	3308      	adds	r3, #8
 8003802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <pvPortMalloc+0x6e>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	617b      	str	r3, [r7, #20]
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d06f      	beq.n	800390c <pvPortMalloc+0x154>
 800382c:	4b45      	ldr	r3, [pc, #276]	@ (8003944 <pvPortMalloc+0x18c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d86a      	bhi.n	800390c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003836:	4b44      	ldr	r3, [pc, #272]	@ (8003948 <pvPortMalloc+0x190>)
 8003838:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800383a:	4b43      	ldr	r3, [pc, #268]	@ (8003948 <pvPortMalloc+0x190>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003840:	e004      	b.n	800384c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d903      	bls.n	800385e <pvPortMalloc+0xa6>
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f1      	bne.n	8003842 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800385e:	4b37      	ldr	r3, [pc, #220]	@ (800393c <pvPortMalloc+0x184>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003864:	429a      	cmp	r2, r3
 8003866:	d051      	beq.n	800390c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2208      	movs	r2, #8
 800386e:	4413      	add	r3, r2
 8003870:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	1ad2      	subs	r2, r2, r3
 8003882:	2308      	movs	r3, #8
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	429a      	cmp	r2, r3
 8003888:	d920      	bls.n	80038cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800388a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4413      	add	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <pvPortMalloc+0xfc>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	613b      	str	r3, [r7, #16]
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	f000 f90a 	bl	8003ae0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <pvPortMalloc+0x18c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <pvPortMalloc+0x18c>)
 80038d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038da:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <pvPortMalloc+0x18c>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <pvPortMalloc+0x194>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d203      	bcs.n	80038ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038e6:	4b17      	ldr	r3, [pc, #92]	@ (8003944 <pvPortMalloc+0x18c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a18      	ldr	r2, [pc, #96]	@ (800394c <pvPortMalloc+0x194>)
 80038ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <pvPortMalloc+0x188>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003902:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <pvPortMalloc+0x198>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	4a11      	ldr	r2, [pc, #68]	@ (8003950 <pvPortMalloc+0x198>)
 800390a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800390c:	f7ff fa44 	bl	8002d98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <pvPortMalloc+0x17a>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60fb      	str	r3, [r7, #12]
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <pvPortMalloc+0x176>
	return pvReturn;
 8003932:	69fb      	ldr	r3, [r7, #28]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3728      	adds	r7, #40	@ 0x28
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200040f0 	.word	0x200040f0
 8003940:	20004104 	.word	0x20004104
 8003944:	200040f4 	.word	0x200040f4
 8003948:	200040e8 	.word	0x200040e8
 800394c:	200040f8 	.word	0x200040f8
 8003950:	200040fc 	.word	0x200040fc

08003954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04f      	beq.n	8003a06 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003966:	2308      	movs	r3, #8
 8003968:	425b      	negs	r3, r3
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4413      	add	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <vPortFree+0xbc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <vPortFree+0x46>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	60fb      	str	r3, [r7, #12]
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <vPortFree+0x66>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60bb      	str	r3, [r7, #8]
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	e7fd      	b.n	80039b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <vPortFree+0xbc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01e      	beq.n	8003a06 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11a      	bne.n	8003a06 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <vPortFree+0xbc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80039e0:	f7ff f9cc 	bl	8002d7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <vPortFree+0xc0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <vPortFree+0xc0>)
 80039f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039f2:	6938      	ldr	r0, [r7, #16]
 80039f4:	f000 f874 	bl	8003ae0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80039f8:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <vPortFree+0xc4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a06      	ldr	r2, [pc, #24]	@ (8003a18 <vPortFree+0xc4>)
 8003a00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a02:	f7ff f9c9 	bl	8002d98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a06:	bf00      	nop
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20004104 	.word	0x20004104
 8003a14:	200040f4 	.word	0x200040f4
 8003a18:	20004100 	.word	0x20004100

08003a1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a22:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003a26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a28:	4b27      	ldr	r3, [pc, #156]	@ (8003ac8 <prvHeapInit+0xac>)
 8003a2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3307      	adds	r3, #7
 8003a3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0307 	bic.w	r3, r3, #7
 8003a42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <prvHeapInit+0xac>)
 8003a4c:	4413      	add	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a54:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <prvHeapInit+0xb0>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <prvHeapInit+0xb0>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a68:	2208      	movs	r2, #8
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0307 	bic.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <prvHeapInit+0xb4>)
 8003a7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <prvHeapInit+0xb4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <prvHeapInit+0xb4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	1ad2      	subs	r2, r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <prvHeapInit+0xb4>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <prvHeapInit+0xb8>)
 8003aaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <prvHeapInit+0xbc>)
 8003ab2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <prvHeapInit+0xc0>)
 8003ab6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003aba:	601a      	str	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	200004e8 	.word	0x200004e8
 8003acc:	200040e8 	.word	0x200040e8
 8003ad0:	200040f0 	.word	0x200040f0
 8003ad4:	200040f8 	.word	0x200040f8
 8003ad8:	200040f4 	.word	0x200040f4
 8003adc:	20004104 	.word	0x20004104

08003ae0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ae8:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <prvInsertBlockIntoFreeList+0xac>)
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e002      	b.n	8003af4 <prvInsertBlockIntoFreeList+0x14>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d8f7      	bhi.n	8003aee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d108      	bne.n	8003b22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d118      	bne.n	8003b68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <prvInsertBlockIntoFreeList+0xb0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d00d      	beq.n	8003b5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e008      	b.n	8003b70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <prvInsertBlockIntoFreeList+0xb0>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e003      	b.n	8003b70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d002      	beq.n	8003b7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	200040e8 	.word	0x200040e8
 8003b90:	200040f0 	.word	0x200040f0

08003b94 <memset>:
 8003b94:	4402      	add	r2, r0
 8003b96:	4603      	mov	r3, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <memset+0xa>
 8003b9c:	4770      	bx	lr
 8003b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba2:	e7f9      	b.n	8003b98 <memset+0x4>

08003ba4 <_reclaim_reent>:
 8003ba4:	4b29      	ldr	r3, [pc, #164]	@ (8003c4c <_reclaim_reent+0xa8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4283      	cmp	r3, r0
 8003baa:	b570      	push	{r4, r5, r6, lr}
 8003bac:	4604      	mov	r4, r0
 8003bae:	d04b      	beq.n	8003c48 <_reclaim_reent+0xa4>
 8003bb0:	69c3      	ldr	r3, [r0, #28]
 8003bb2:	b1ab      	cbz	r3, 8003be0 <_reclaim_reent+0x3c>
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	b16b      	cbz	r3, 8003bd4 <_reclaim_reent+0x30>
 8003bb8:	2500      	movs	r5, #0
 8003bba:	69e3      	ldr	r3, [r4, #28]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	5959      	ldr	r1, [r3, r5]
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	d13b      	bne.n	8003c3c <_reclaim_reent+0x98>
 8003bc4:	3504      	adds	r5, #4
 8003bc6:	2d80      	cmp	r5, #128	@ 0x80
 8003bc8:	d1f7      	bne.n	8003bba <_reclaim_reent+0x16>
 8003bca:	69e3      	ldr	r3, [r4, #28]
 8003bcc:	4620      	mov	r0, r4
 8003bce:	68d9      	ldr	r1, [r3, #12]
 8003bd0:	f000 f864 	bl	8003c9c <_free_r>
 8003bd4:	69e3      	ldr	r3, [r4, #28]
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	b111      	cbz	r1, 8003be0 <_reclaim_reent+0x3c>
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f000 f85e 	bl	8003c9c <_free_r>
 8003be0:	6961      	ldr	r1, [r4, #20]
 8003be2:	b111      	cbz	r1, 8003bea <_reclaim_reent+0x46>
 8003be4:	4620      	mov	r0, r4
 8003be6:	f000 f859 	bl	8003c9c <_free_r>
 8003bea:	69e1      	ldr	r1, [r4, #28]
 8003bec:	b111      	cbz	r1, 8003bf4 <_reclaim_reent+0x50>
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f000 f854 	bl	8003c9c <_free_r>
 8003bf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003bf6:	b111      	cbz	r1, 8003bfe <_reclaim_reent+0x5a>
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f000 f84f 	bl	8003c9c <_free_r>
 8003bfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c00:	b111      	cbz	r1, 8003c08 <_reclaim_reent+0x64>
 8003c02:	4620      	mov	r0, r4
 8003c04:	f000 f84a 	bl	8003c9c <_free_r>
 8003c08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003c0a:	b111      	cbz	r1, 8003c12 <_reclaim_reent+0x6e>
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f000 f845 	bl	8003c9c <_free_r>
 8003c12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003c14:	b111      	cbz	r1, 8003c1c <_reclaim_reent+0x78>
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 f840 	bl	8003c9c <_free_r>
 8003c1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003c1e:	b111      	cbz	r1, 8003c26 <_reclaim_reent+0x82>
 8003c20:	4620      	mov	r0, r4
 8003c22:	f000 f83b 	bl	8003c9c <_free_r>
 8003c26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003c28:	b111      	cbz	r1, 8003c30 <_reclaim_reent+0x8c>
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f000 f836 	bl	8003c9c <_free_r>
 8003c30:	6a23      	ldr	r3, [r4, #32]
 8003c32:	b14b      	cbz	r3, 8003c48 <_reclaim_reent+0xa4>
 8003c34:	4620      	mov	r0, r4
 8003c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c3a:	4718      	bx	r3
 8003c3c:	680e      	ldr	r6, [r1, #0]
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 f82c 	bl	8003c9c <_free_r>
 8003c44:	4631      	mov	r1, r6
 8003c46:	e7bb      	b.n	8003bc0 <_reclaim_reent+0x1c>
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000010 	.word	0x20000010

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	@ (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	@ (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	@ (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	@ (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 f870 	bl	8003d48 <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	08003de8 	.word	0x08003de8
 8003c8c:	08003de8 	.word	0x08003de8
 8003c90:	08003de8 	.word	0x08003de8
 8003c94:	08003dec 	.word	0x08003dec

08003c98 <__retarget_lock_acquire_recursive>:
 8003c98:	4770      	bx	lr

08003c9a <__retarget_lock_release_recursive>:
 8003c9a:	4770      	bx	lr

08003c9c <_free_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d041      	beq.n	8003d28 <_free_r+0x8c>
 8003ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca8:	1f0c      	subs	r4, r1, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfb8      	it	lt
 8003cae:	18e4      	addlt	r4, r4, r3
 8003cb0:	f000 f83e 	bl	8003d30 <__malloc_lock>
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <_free_r+0x90>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	b933      	cbnz	r3, 8003cc8 <_free_r+0x2c>
 8003cba:	6063      	str	r3, [r4, #4]
 8003cbc:	6014      	str	r4, [r2, #0]
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc4:	f000 b83a 	b.w	8003d3c <__malloc_unlock>
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	d908      	bls.n	8003cde <_free_r+0x42>
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	1821      	adds	r1, r4, r0
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	bf01      	itttt	eq
 8003cd4:	6819      	ldreq	r1, [r3, #0]
 8003cd6:	685b      	ldreq	r3, [r3, #4]
 8003cd8:	1809      	addeq	r1, r1, r0
 8003cda:	6021      	streq	r1, [r4, #0]
 8003cdc:	e7ed      	b.n	8003cba <_free_r+0x1e>
 8003cde:	461a      	mov	r2, r3
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b10b      	cbz	r3, 8003ce8 <_free_r+0x4c>
 8003ce4:	42a3      	cmp	r3, r4
 8003ce6:	d9fa      	bls.n	8003cde <_free_r+0x42>
 8003ce8:	6811      	ldr	r1, [r2, #0]
 8003cea:	1850      	adds	r0, r2, r1
 8003cec:	42a0      	cmp	r0, r4
 8003cee:	d10b      	bne.n	8003d08 <_free_r+0x6c>
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	4401      	add	r1, r0
 8003cf4:	1850      	adds	r0, r2, r1
 8003cf6:	4283      	cmp	r3, r0
 8003cf8:	6011      	str	r1, [r2, #0]
 8003cfa:	d1e0      	bne.n	8003cbe <_free_r+0x22>
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	6053      	str	r3, [r2, #4]
 8003d02:	4408      	add	r0, r1
 8003d04:	6010      	str	r0, [r2, #0]
 8003d06:	e7da      	b.n	8003cbe <_free_r+0x22>
 8003d08:	d902      	bls.n	8003d10 <_free_r+0x74>
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	e7d6      	b.n	8003cbe <_free_r+0x22>
 8003d10:	6820      	ldr	r0, [r4, #0]
 8003d12:	1821      	adds	r1, r4, r0
 8003d14:	428b      	cmp	r3, r1
 8003d16:	bf04      	itt	eq
 8003d18:	6819      	ldreq	r1, [r3, #0]
 8003d1a:	685b      	ldreq	r3, [r3, #4]
 8003d1c:	6063      	str	r3, [r4, #4]
 8003d1e:	bf04      	itt	eq
 8003d20:	1809      	addeq	r1, r1, r0
 8003d22:	6021      	streq	r1, [r4, #0]
 8003d24:	6054      	str	r4, [r2, #4]
 8003d26:	e7ca      	b.n	8003cbe <_free_r+0x22>
 8003d28:	bd38      	pop	{r3, r4, r5, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20004244 	.word	0x20004244

08003d30 <__malloc_lock>:
 8003d30:	4801      	ldr	r0, [pc, #4]	@ (8003d38 <__malloc_lock+0x8>)
 8003d32:	f7ff bfb1 	b.w	8003c98 <__retarget_lock_acquire_recursive>
 8003d36:	bf00      	nop
 8003d38:	20004240 	.word	0x20004240

08003d3c <__malloc_unlock>:
 8003d3c:	4801      	ldr	r0, [pc, #4]	@ (8003d44 <__malloc_unlock+0x8>)
 8003d3e:	f7ff bfac 	b.w	8003c9a <__retarget_lock_release_recursive>
 8003d42:	bf00      	nop
 8003d44:	20004240 	.word	0x20004240

08003d48 <_init>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr

08003d54 <_fini>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr
